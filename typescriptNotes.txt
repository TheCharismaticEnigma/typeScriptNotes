TYPESCRIPT: 

IMPORTANT: READ Documentation on typescriptlang.org
IMPORTANT: VUE.js is written using TS. So understand it deeply.

NOTE: TS is like having JS with JAVA features and behavior . 
OOP like JAVA, Static Typing like JAVA, Generics like JAVA. 
In short combination of JAVA and JS 

- A programming language to address shortcomings of JS 
- Built on top of JS. Every JS file is a TS file. 
- can be used on frontend and backend. Anything js does, TS does too.
- Superset of JS. In TS File all js code is valid TS code.  

DRAWBACKS: 

- compilation (parsing and convertion from TS to JS) is always needed 
because browsers right now can't understand TS. 

- TS compiler takes TS code and converts to js code. (TRANSPILATION) 

- More discipline required. So, use for med-large size projects. 

- npm needed to install typescript compiler 

Benefits of TS : 
--------------

Type Checking  
AUTO Code Completion/IntelliSense 
Refactoring 
New Features 

a) static typing: 
- can have data types for variables 
- explicitly set the data type of variables at compile time (like JAVA)
- code is parsed by TS compiler and errors are displayed at compile time

- We don't have to run our application to get the syntax 
errors at runtime.


Installation using node/npm :
------------------------------ 

npm i -g typescript 

tsc -v  ... (typescript compiler --version)

In terminal/git bash: 

tsc file.ts  ==> compiles and produces another file.js file which contains
compiled code in js.  

FOR COMPILING TS code write this in terminal... tsc file.ts 

ANNOTATING A VARIABLE TO a given type : 
-------------------------------------

let age: number = 20 ; 

CONFIGURING file for the typescript compiler (tsc) : 
In the terminal , 
tsc --init

By convention: 
PUT the source TS files/code inside a folder.(src) 
And the compiled files (.js) will be in dist(ributable) folder. 

Modify: 

rootDir: "./src" -> where our ts files will be stored (source folder) 
outDir: "./dist" -> where our js files will be stored (distributable folder)
removeComments : true => our compiled JS won't contain any commends in TS files. 
noEmitOnError: true => tsc won't generate js files if error in ts files. 
sourceMap: true => specifies how each line of ts maps to generated line of JS code. 
                   creates a .js.map file in dist folder for debuggers . 

After configuring, we can compile all files in project by simply 
running tsc in terminal without file name. 
So all ts files => src directory
   all js files => dist(ributable) directory 

Configure the tsc by en/disabling various settings in tsconfig.json
file generated using tsc -init command. 

BUILT IN TYPES: 

JS - number, string, boolean, undefined,
              null, bigInt, symbol, object

TS - any,unknown,never, enum, tuple

In TS, separate a large number's digits with _ 
let sales:number = 123_456_789 ; 

NOTE: TS compiler automatically infers/detects the data type of 
a variable without you annotating it to the 
variable (based on the value) ; 
Ex. let theName:number = 123 ; .... (same as let theName = 123) 

If variable is declared and not initialized with a value --> 
TS implicitly gives it type ANY as We can set it to any value (like in JS)
Which doesn't make sense because it is JS behavior 

function render(document:any) { ... }

IMPORTANT: not recommended. 
To remove these erros, in tsconfig.json file set the noImplicitAny:false

ARRAYS: 

In JS arrays, each element can have DIFFERENT DATA TYPE.
IN TS, explicit data type annotation(adding notes for explanation)
of the data type to an array is possible 

let numbers:number[] = [1,2,3,4] ; 

If empty array, by default type is any[] (that is JS arrays) 

TUPLES: 
- fixed length array with each element having a particular type.
- used when working with pair of values. 
- internally represented using JS[]. After compilation, converted 
  to regular js[] . 
- Best Practice: Restrict tuple to size of 2 (like key value pair)

let user : [number, string] = [102121, 'Mosh Hamedani'] ; 

ENUMS: 
-----

- represents list of RELATED CONSTANTS (grouped together) 
- follows PASCALNAMINGCONVENTION for enum name and members 
- by default values are given from 0, 1, ... for each member. 
- Can explictly assign desired values (also strings) for constants. 

NOTE: If enums are defined using CONSTANTs, TS comiler generates More
optimized JS code while TRANSPILATION. 

const enum Name {
  first = "Avi",
  mid = "V",
  last = "Wal",
}
const first: Name = Name.first;
const mid: Name = Name.mid;
const last: Name = Name.last;

const fullName = `My full name is ${first} ${mid} ${last}`;

FUNCTIONS: 
---------

- AS best practice, ALL PARAMETERS AND RETURN TYPES of FUNCTIONS
should be annotated. TS enables that. 
- enables to set the return type of function 
- return type is void(by default) IF NO value is returned from function 
- compilation error if local variables are defined and not used 
- compilation error for unused parameters 
- JS by default always returns undefined from our functions. So TS compiler
warns us as returning undefined from function can cause bugs.

- Unlike in JS where arguments can be more/less than parameter count, 
argument count and type in TS must be exactly matching
to that of parameters count and data type annotated to parameters. (like JAVA)

- Can make a parameter optional using syntax: 
parameterName?:number  

function tax (income:number):void { 
    ... calculates tax but returns no value as return 
    type is set to void. 

    return ; 
}

function getSize (size?:number):number { 
    Here size is an OPTIONAL parameter. 
    by default parameters are undefined 
    if arguments are not passed but still used. 

    return size || 12  ;  
}


NOTE: 
1. Use tsc (typescript compiler) to transpile the code 
2. Then use node ... path to js file command to run JS in terminal
Ex. tsc index.ts 
    node dist/index.js


OBJECTS: 

- In JS, objects are dynamic. TS is stickler regarding
 shape/structure of objects.

- object structure can be annotated like variable data type. 
- properties can be made optional 
- readonly keyword can be used to make a property read only
- for methods, their signature must be annotated 

let Person: {
  name: string;
  readonly birthYear: number;
  age?: () => number;
} = {
  name: "Enigma",
  birthYear: 1993,
  age: function () {
    return 2023 - this.birthYear;
  },
};

TOPIC: TYPE ALIASES: (Custom Types)  
-------------------

NOTE: Using TYPE ALIASES we can define a custom type. 
CAN solve all problems in above object structure: 

1. Too hard to understand

2. Doesn't have a dynamic structure. Has a fixed SHAPE.  
     New objects can have different properties. 

3. To create another similar object, we'd have to repeat structure. 
   And thus violate DRY structure 

Using type ALIASES, can set the structure at one place and 
reuse it multiple times. (like classes and Objects) 

type Employee = { 
  readonly id: number, 
  name: string, 
  retire: (date: Date) => void 
}

let employee1 : Employee = { 
  id: 1, 
  name: 'AH', 
  reture: (date: Date) => console.log(date) ; 
}

let employee2 : Employee = { 
  id: 2, 
  name: 'TS', 
  reture: (date: Date) => console.log(date) ; 
}

NOTE: Using type ALIASES, we can define a object structure once
and reuse it with different values multiple times. 


TOPIC: UNION TYPES 
------------------

- With Union Types (|) can give a function/variable parameter of
  more than one data type. It can be one of many types 

- The parameter can be of one/more Data types. And so we handle 
multiple different scenarios. (By narrowing via type-GUARD)

function kgToLbs (weight: number|string): number { 
  weight can be of type number or of type string. 

  // Then for each data type we handle the case 

  if (typeof weight === 'number')
    .... 
  
  if (typeof weight == 'string') .... 
}


TOPIC: INTERSECTION TYPES : 
----------------------------

- used for parameters/variables which are an intersection of MULTIPLE 
DATA TYPES. 

- used with CUSTOM type ALIASES. 
ex. Parameter should be of type Draggable and Resizable

- Can create a new Type which is intersection/combination of MULTIPLE
types.   ex. type UIWidget = Draggable & Resizable ; 

type Draggable = { 
  drag: () => void ; 
}

type Resizable = { 
  resize: () => void 
}

// In the new type, initialize ALL MEMBERS OF Draggable and Resizable
// object. 

type UIWidget = Draggable & Resizable ;

let textBox: UIWidget = { 
  drag: () => {}, 
  resize: () => { }, 
}

TOPIC: LITERAL TYPES : 
--------------------

- limiting values that can be assigned to a variable. 
- we annotate variable with LITERAL/Exact/specific value(s) 
- the variable MUST be set to one of those values. 
- Literals can be Strings, numbers, and etc. 

type Units = 'kg' | 'lbs' ; (Type ALIASES + Union Type) 

let unit1 : Units = 'kg' ; 
let unit2 : Units = 'lbs' ; 

// Anything else won't be accepted. 


TOPIC: Nullable Types (null | undefined) 

- by default TS doesn't allow nullable types to be passed 
- if in case we need them we can pass using UNION Types. 

Ex. name: string|null|undefined 
 
TOPIC: OPTIONAL CHAINING: 
------------------------

- enables error handling without if.. else statements. 
- Used in combination with Nullish Coaelscing Operator. 
- (?. + ??) to have a fallback default value. 

Ex. customer?.birthday?.getFullYear() ; 
Ex. customers?.[0] 
Ex. variableName?.(arguments..) . 

NOTE: Above code expressions Will be executed if variable name
    references an actual function/object


WHEN working will nullish values, you need a fallback default 
value ==> Nullish Coaelscing Operator is used for that 
Ex. customers?.[0] ?? 'No Customers' 


TOPIC: Type Assertions: (as keyword OR <>) 
-----------------------

IMPORTANT: The 'as' keyword DOESN'T perform any TYPE CONVERSION. 
It just asserts that we know more about the data type of an element 
than TSC 

let phone = document.getElementById('phone') as HTMLInputElement ; 
phone.value 

NOTE: IF the object is not of Assterted type (HTMLInputElement), 
then at the point where we're trying to access value property, 
the code will crash. THERE IS NO TYPE CONVERSION. 

SYNTAX-1 : 
let phone = <HTMLInputElement> document.getElementById('phone') ; 

SYNTAX-2 : 
let phone = document.getElementById('phone') as HTMLInputElement ; 


TOPIC: UNKNOWN TYPE 
--------------------

- Safer version of any type. 
- Represents Any value but unlike any, we 
can't perform any operatons on unknown type BEFORE using type-GUARD
for narrowing down to different types. 

NOTE: USING UNKNOWN TYPE >>>> ANY TYPE. 
As compiler makes us to use TYPE-Checking to make sure that 
methods we're calling exist

In any type compiler does no checking 

Used Where we don't know the TYPE Of element beforehand, and 
there can be multiple data types possible. 

Can use NARROWING USING TYPE-GUARD to handle multiple scenarios. 

1. if (typeof document === 'string') { 
       .. here we'll have access to all string methods.
       as TSC knows that this document is a string object. 
   }

NOTE: typeof operator -> works for primitive types 
If custom object is created from classes then , 
instanceOf operator

Ex. function render (document:unknown) { 
    if primitive type => typeof 
    if reference type => instanceof 

    if (typeof document === 'number') { 
      .... access to all inbuilt number methods
    }

    if (typeof document === 'string') { 
      ... access to all inbuilt number methods. 
    }

    if (customObject instanceOf className) { 
      ..... access all the inbuilt object methods 
    }
}

TOPIC => NEVER TYPE
-------------------

- Represents value that never occur. 
- Helps detect UNREACHABLE CODE which would be ignored otherwise.
- WHY?: Compiler infers return type void and thus the UNREACHABLE
 code isn't detected.

NOTE: CASE 1 

function reject(message:string ='Error Message'): never { 
  ... 
  throw new Error(message) ; 
}

reject() ; 
console.log('This is an unreachable code which will now be detected 
at compile time only because return type of function is never') ; 

NOTE: CASE 2 

function reject(message:string ='Error Message') { 
  ... 
  throw new Error(message) ; 
}

reject() ; 

console.log('This is an unreachable code that will NOT
be detected now at compile time because Compiler infers the 
return type of reject function to be void. ') ; 

TS TYPES: any, unknown, never, enum(set of constant), tuple(entry[])


TOPIC: CLASSES, INTERFACES AND OBJECT-ORIENTED-PROGRAMMING: 
----------------------------------------------------------

- Objects are building blocks of application.
- Object contains DATA (state) and Operations (behavior)
- Data => Properties and behavior => methods 

Real World => LoginForm, EmailService objects => Each perform a 
single task and can be reused multiple times. 

TOPIC: CREATING CLASSES: 
------------------------

- Class: Blueprint for creating object. 

- Constructor: A special function inside a class. 
   (called when new object is created using new keyword) with the
  job of initializing the fields to the GIVEN/DEFAULT values. 

- Constructor always returns an instance of a class. A new object

- this keyword here, references the current class. 

- contains methods for behavior 

- Properties are only for TS. In JS the constructor function simply 
initializes given properties on the new object. 


class Account { 
  id: number ;  
  owner: string ; 
  balance: number ; 

  constructor(id: number, owner:string, balance:number) { 
    this.owner = owner ; 
    this.balance = balance ;
    this.id = id  ; 
  }

  deposit(amount:number): void { 
    if (amount <= 0)
       throw new Error ('AHAHAHAH twerp!') ; 

    this.balance += amount ; 
  }
}

TOPIC: Creating Objects 
in VSCODE, blue members - properties and Purple Mumbers - methods

const account = new Account(1,'Mosh',0) ; 

console.log(account instanceOf Account) => prints true  

TOPIC: READ ONLY and OPTIONAL Properties:
-----------------------------------------

readonly id: number ; - readonly property
nickname?: string ;  - optional property 


TOPIC: ACCESS Modifers: 

- control the access of proprties and methods of classes. 
- private, public and protected
- properties are public by default 

- private properties are only accessible inside a Class. 
- By convention, prefixed using _  Ex. private _balance:number ; 

- can use getters and setters to modify/work with private fields
  and private methods are helper methods anyway. 

IMPORTANT: PARAMETER PROPERTIES: 

Declaring properties and initializing them using constructor 
is repetitive. And it can be shortened by : 

constructor(
    public readonly id: number,
    private _owner: string,
    public balance: number
  ) { }


now ts compiler will automatically declare these properties 
with these access modifiers and keywords in our class and also 
initialize them in constructor.

TOPIC: Getters and Setters 
----------------------------- 
- getters and setters are methods but ACCESSED and worked with
like they're properties. 

get keyword -> getter method -> returns value of private property
-> isn't called but accessed like property. 

Ex. 
get balance(): number  { return this._balance ; }
const accountBalance = account.balance ; 

set keyword -> setter method -> sets value of private property

Ex. set balance(value:number):void { 
   if (value <= 0) 
       throw new Error('Invalid Value') ; 

   this._balance = value ; 
}

account.balance = 1 ;  ==> SAME AS  account.balance(1) under the hood


TOPIC: Index signature Property: 
--------------------------------

- since TS is stickler when it comes to object shape, we can't 
add properties dynamically 

- ISP is a special property. 
- used to add properties to objects dynamically (like JS) 
- with this, we get Dynamic Properties + Type Safety 

class SeatAssignment { 
  // A1: 'Mosh'; 
  // A2: 'John'; ......

  [seatNumber: string]: string; 
}

const seats = new SeatAssignment() ; 
seats['A1'] = `Mosh` ; 
seats['A2'] = `John` ; 
seats.A3 =.....    Dynamic Property Addition + Type Safety


TOPIC: STATIC MEMBERS: 
---------------------

- static keyword 
- Property that belongs to a class and not an object 
- can't modify using this. because this references 
    the current object and not the class.

ClassName.propertyName  => accessed like this. 

-In Js these are directly applied on constructorfunctions
Ex. Array.from() . 

NOTE: getters and setters modifying static properties must 
have static keyword too. 

TOPIC: Inheritance: 
-------------------

Put common code in another parent class and have others inherit 
from this parent class. In this way no repetition of code. 

- Allows to reuse our code. 
- Child/Derived/Sub class inherits from Parent/Base/Super class. 

- Parent Class inherits all the public properties of Parent Class.
Child class(es) can override the members (polymorphism) and if a member
is not present in child class, it is searched in parent class. 
(prototypical inheritence chain). 

- Constructor of derived classes must have super() call, where 
super() is the constructor of the base(parent) class.
- In super(), just add the values and not the access keywords, as
The fields are already initialized in parent class. 

class Person { 
  constructor(public firstName:string, public lastName:string) { } 

  get fullName() { 
    return `${this.firstName} ${this.lastName}` ; 
  }

  walk() { 
    console.log('can Walk') ; 
  }
}

class Student extends Person { 
  constructor(private readonly studentId:number, 
                        firstName:string, lastName:string) { 
    super(firstName, lastName) ; 
  }

  takeTest() {
    console.log(`students take test`) ; 
  }
}

NOTE: If no constructor in DERIVED/child class that means we 
REUSE the constructor from base/parent class and we don't want 
to add any additional properties to the derived class. 

NOTE: student object will inherit all the properties from the 
parent Person object + it will have its own properties. 

IMPORTANT-NOTE: Each class must be in a different module. 
Use modules and export/import features.  

TOPIC: Method-overriding: 
-------------------------

IMPORTANT: super references the BASE CLASS. Can use to get its 
properties. super(), super.fullName. etc. 

- changing the implementation of an inherited method inside a child
class (without changing the signature)

override get fullName() { 
  // `Professor ${this.firstName} ${this.lastName}` ;  OR 
  return `Professor ` + super.fullName ;
}

TOPIC: polymorphism 

- situation where an OBJECT can take many shapes/forms. 
- useful because we can create changes without changing the code.
Just based on inheritence and method-overriding. 

Ex.  printNames([
      new Student(12121,'John', 'Smith') ; 
      new Teacher(121212,'John','Wick') ; 
]) ; 

function printNames(people:Person[]):void { 
  people.forEach(person => console.log(person.fullName)) ;
}

NOTE: printNames() takes a Person[] but in forEach method 
in each iteration, Person object is changing forms. Sometimes, 
it's a Teacher or sometimes it's a student. 

We can also have principal object without modying the printNames
function for that. 

IMPORTANT NOTE:  OPEN CLOSE PRINCIPLE for OOP:  
- Classes should be OPEN FOR EXTENSION and CLOSED for modification
- we can inherit from them but can't modify them. 

- If IN A CLASS, multiple methods with same name and different 
signature, then METHOD OVERLOADING. 
Ex   .remove(int index) and .remove(int element) 


TOPIC:  PRIVATE AND PROTECTED members: 
---------------------------------------

- similar to private members EXCEPT for the fact that they 
CAN BE INHERITED by child classes 
- can't be access in objects, but accessible within the class.

in the child classes, this.protectedMember can be accessed. 

TOPIC: ABSTRACT CLASS and METHOD : 

- abstract: Existing in thought/idea but not in concrete reality

NOTE: Abstract Methods can only exist in Abstract Classes 

- if you want to stop from creating an instance of a class, 
due to some reasons => declare it abstract 

- Abstract classes have ABSTRACT METHODS 
(methods with no implementation). They're used as templates/contracts.
Methods with only signatures.

- abstract classes can be used to create template of code for 
child classes. But we don't want the class to be instantiated 

SYNTAX: 
abstract class AbstractClass { 
  constructor(public color: string) { } 

  abstract render():void ; // no implementation thus no {}
}

NOTE: Abstract has no representation in JS, IT's a TYPESCRIPT 
concept. 

NOTE: In JS, we don't have interfaces. Interfaces are ignored by
TSC compiler while transpiling to js 

NOTE: When methods have login/implementation for child classes 
to inherit and use , then use abstract. If only declarations, then use 
use interface. 


TOPIC: INTERFACES: 
----------------
- keyword: interface 
- sometimes interfaceNames are prefixed using I 

- Used for determining SHAPE/INTERFACE for creating objects 
- Tell What should be done. How it should be done is implementation
   of that individual class.

- no constructors foor interfaces.  

- Ex.Classes implementing List<> Interface must have .remove() 
method. How elements are removed is implementation details 
LinkedList<> and ArrayList<> classes both have different ways for 
that. 

- Interfaces can only have declaration and no implementation. 
- Interfaces can use Inheritance among each other. 

interface Calender { 
  name: string ; 
  addEvent() : void ; 
  removeEvent(): void ; 
}

class XYZ implements Calender { 
  constructor(public name:string){ } 

  addEvent() { 
    .....
    ..... some implementation 
  }

  removeEvent() { 
    ....
    .... some implementation 
  }
}

- With INTERFACES, objects can have SHAPE. 
- implementation is specific to those classes. 

NOTE: 
IN TS, ALIASES and INTERFACE can be used interchangibly. 
Both determine the shape of object. 
But convention is to use interface in front of 'extends' keyword.

IMPORTANT: We use static properties where we need their single 
instance in memory. Accessed using CLASSNAME

NOTE: Every childClass can be a parentClass but not vice versa


TOPIC: GENERIC/REUSABLE TYPES: 
------------------------------

WHY? The Problem they solve : 

- Static and Rigid structure. No dynamic type-changes possible. 

- If we use any to solve this, we'd lose TYPE-SAFETY, IntelliSense
and other TS Benefits.  

- Provides Generic/Common and Reusable solution. 

NOTE: T means template. 
Comes from C++ template classes. so, c++ templateClasses === 
TS Generic Classes. 

- Using Generic Classes, get 
  TypeSafety + IntelliSense without repeating yourself. 

class KeyValuePair<K,V> { 
  constructor(public key:K, public value:V) {}
}

const numStrPair = new KeyValuePair<number,string>(12,'a') ; 
const strStrPair = new KeyValuePair('twerp','a') ;


WHY? 
Without Generics, we would have to repeat the code of class
multiple times or annotate key to be of any type. 
Which are both performance-hindering. 

TOPIC: GENERIC Functions: 
-------------------------- 

SYNTAX:   function wrapInArray<T>(value:T) { 
             return [value] ; 
          }

const array = wrapInArray('a') ; 

- if (typeof argument === 'string') => array:string[] 
- if (argument instanceOf Person)   => array:Person[] 


TOPIC: GENERIC Interfaces: 
-------------------------- 

- Type Guarding for all the scenarios and custom/primitive results
is near impossible. Generics helps is to eliminate that step. 
Type Checking + Dynamic Inputs + IntelliSense. 

NOTE: Syntax: 

interface Result<T> {
  data: T | null ; 
  error: string | null ; 
}


NOTE: if a function returns a GENERIC result, then the function 
must be generic function too. 

function fetchResult<T> (url:string): Result<T> {  
  // returns an object implementing Result<T> interface 

  return { data:null , error: null }; 
}

if we call the fetchFunction with , 

const result = fetch<User>(`ht..s://.....`) ; 

then result will be of type Result<User>. 
the data property will be a User object and we can access user 
properties using result.data. 


TOPIC :Generic Constraints : 
-----------------------------

- use extends keyword. Also applicable on CUSTOM CLASSES. 
Ex. <T extends Person> that means parameter can only be instance of 
Person or all the sub-classes that extend Person class and derived
from it (directly or indirectly) 

- can constrain by: Primtive Types, Interfaces, Classes, 
or even shape of an object.

 (<T extends {name:string}> => only objects that confirm to this shape 
 can be passed  )

WHY? ->  LIMITING the Type of objects that a 
function CAN receive. 

function echo<T extends Person | string>(value:T):T { 
  return value ; 
} 

-> function will only take specific arguments ! 


TOPIC: Extending Generic Classes: 
--------------------------------

- passing on the Generic Type parameter onto child class(es).
- child Class(es) PARAMETER TYPE === Parent Class Parameter type.

NOTE: Interfaces in TS is a concept only FOR TS and for better 
code-organization and it's completely ignored in JS conversion. 

NOTE: Scenrio-1: Passing on the generic type parameter 

class Compressible<T> extends Store<T> { 
  .. T is passed on from Store to Compressible. 
  If Store<string> then Compressible<string>
}

NOTE: Scenario-2 : Restricting Generic Type Parameter 

class SearchableStore<T extends {name:string}> 
                   extends Store<T>  { 

  }

SearchableStore will accept the Type as long as the class has 
property name of type string. 

NOTE: Scenrio-3 : Fixing the Generic Type Parameter 

class ProductStore extends Store<Product> { 
  ... 
}

Now the ProductStore class 
will take Parameters of Type Product. 


TOPIC: Key-Of Operator :
------------------------

- keyof T ==> returns Union of Properties of type T 

Ex. interface Product { 
    name:string ;  
    price: number ;
  }

  keyof Product => 'name' | 'price' ; 


TOPIC: TYPE-MAPPING: 
-------------------

- basing (and creating) a type on another type. 
- create a new type based on another type with some changes. 
- use type Aliases. 

interface Product { 
  name: string ; 
  price: number ; 
}

type ReadOnlyProduct = { 
  readonly [Property in keyof Product] : Product[Property] ; 
}

NOTE: Product[Property] gets the data type of property dynamically. 
If Property === 'name' => Product[Property] = 'string' 

NOTE: key of returns the union of all properties in Product Type

NOTE: in operator iterates over all the keys and in each 
       iteration gets a key. => like for loop 

IMPORTANT: 
CAN ADD Generic Type to the Type-Mapping 

type ReadOnly<T> = { 
  readonly [Key in keyof T] : T[Key] ; 
  // get each key in T and get its data type too. 
}

let product:ReadOnly<Product> = { 

} 

NOTE: Making a new interface for all optional Properties. 

type Optional<T> = { 
  [Key in keyof T]?: T[Key] ; 
}

TOPIC: DECORATORS: 
------------------

- Attributes applied to Classes and their Members. 
- WHY?: for manipulating and changing their behavior

- Under The Hood: 
DECORATORS are functions (called by Js Runtime) which get our 
classes as arguments. And they can change/add members to our 
class. 

- In TS, create custom decorators. In Vue, you have inbuilt.


TOPIC: Class Decorators: 
------------------------

- Arguments wary on where we'd apply decorator function. 

- For classes,add ONE Parameter (which represents
              constructor function of class) 

- If Type of Parameter is function =>
         Assumed that it's constructor of class. 

- Can add, delete, change properties of class. 

IMPORTANT: 
- PROPERTIES are manipulated on constructor.prototype object. 
Added to prototype, deleted from prototype. 

- all instances of the constructor function and all the classes 
 with the decorator inherit those changes. 

NOTE: Can solve problem using inheritence. 'Decorators' is 
just another tool

- Classes are modified without the need of instantiating. 

function Component(constructor:Function) { 
  constructor.prototype.addProperty = `PropertyAdded` ; 
  construcotr.prototype.isModified  = true ; 
}

@Component
class Person {} 

NOTE: all classes created using Person constructor function 
will inherit those changes. 


TOPIC: PARAMETERIZED Decorators: 
-------------------------------- 

- For creating PARAMETERIZED decorators, create a function 
with parameters, which in turn returns a Decorator function(which
applies these properties on the constructor.prototype object). 
(Decorator Factory)

- DecoratorFactory(parameter:any) => DecoratorFunction. 

NOTE: SYNTAX: 

const ComponentOptions = { 
  selector:string ; 
}

function Component(options:ConstructorOptions) { 
  return function (constructor:Function) { 
    constructor.prototype.options = options ; 
    constructor.prototype.isModified = true; 
  }
}

@Component({selector:"asasa"}) ; 
public class Person { }

NOTE: Type Aliases is a concept just like interface. Only for tsc
and ignored by TSC while TRANSPILATION. 


TOPIC: Decorator Composition:
------------------------------ 

- Applying multiple Decorators to a class/its members. 

- If multiple Decorators are applied, then THEY ARE APPLIED 
in REVERSE ORDER. 
Ex.   f(g(x)) ==> 1. value = g(x) is evaluated --> f(value) ;

function Pipe(constructor:Function) { .... } 
function Decorator(constructor:Function) {....} 

@Pipe 
@Decorator 

public class Person { } ; 

NOTE: 1. Decorator will be called first => Then the Pipe 


IMPORTANT: EVERY PROPERTY in an object has a property called 
PropertyDescription that DESCRIBES that object.
.value - references the target property.  

TOPIC: Method Decorators : 

- Mostly used to enhance our methods in objects. 

- If Decorator(Function) is applied on a function/method, 
              then three parameters should be passed. 

1. target:any ==> Parent containing the method 
2. name: string => function Name
3. descriptor: PropertyDescriptor.  

function Log(target:any, name:string,
               descriptor:PropertyDescriptor){

  // Because of (value:any) => no IntelliSense => 
  we do type assertion to tell compiler that 
  this is a function => we can access inbuilt function methods

  const originalValue = descriptor.value as Function ; 

  descriptor.value = function(...arguments:any) { // REST
    originalValue.call(this, ...arguments) ; // SPREAD
  }

  new implementation of function takes varying number of argumentsof 
  type any, using REST operator bundled into an array.
}

class Person { 

@Log 
say(message:string) { 
  console.log(`Person says ${message}) ; 
}

}


TOPIC: Accessor Decorators: - 
--------------------------- 

- applied on getters (get) and setters (set) 

- similar to method decorators. WHY? accessors are methods under
the hood. 

- to access the original getter using PropertyDescriptor object, 
descriptor.get and descriptor.set 

function Capitalize(target: any, key: string, descriptor: PropertyDescriptor) {
  const prevGetter = descriptor.get;

  descriptor.get = function () {
    // reassing new function
    const result = prevGetter?.call(this); // getters have no argument

    return typeof result === "string" ? result.toUpperCase() : result;
  };
}

class Person {
  constructor(private _name: string) {}

  @Capitalize
  get name() {
    return this._name;
  }
}

const meself = new Person(`Sausage`);
console.log(meself.name);


TOPIC PROPERTY DECORATORS:
--------------------------

- Enhance existing properties. 
- similar to method decoratior

NOTE: 

- Take two parameters (target:any and name:string) ONLY. 
  NO PropertyDescriptor. 

- Instead we create a custom PropertyDescriptor object for our 
property and assign it to the property using the 
function. 

Using Object.defineProperty
       (target:any
        ,propertyName:string
        ,descriptorObject:PropertyDescriptor); 

NOTE: Object.getPrototypeOf() => returns prototype. 

      Object.getOwnPropertyDescriptor
                (objectName, propertyName:string) 
                 => returns descriptor object for that property.

Own => not from prototype chain. 

descriptor:PropertyDescriptor object properties: 
1. Configurable: (can delete property) 
2. Enumerable: (determines if it'll show up in Object.keys())
3. writable: (false => becomes readonly property) 
4. value: returns actual value. (.get for getters) 


TOPIC: MODULES: 
---------------

- split code in different module. Each serving a purpose. 






